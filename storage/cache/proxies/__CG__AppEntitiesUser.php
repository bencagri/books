<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \App\Entities\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'lastLogin', 'addresses', 'organizations', 'permissions', 'roles', 'accessToken', 'account', 'profileImage', 'isActive', 'password', 'rememberToken', 'createdBy', 'updatedBy', 'id', 'name', 'createdAt', 'updatedAt', 'uuid', '' . "\0" . 'App\\Entities\\User' . "\0" . 'events'];
        }

        return ['__isInitialized__', 'lastLogin', 'addresses', 'organizations', 'permissions', 'roles', 'accessToken', 'account', 'profileImage', 'isActive', 'password', 'rememberToken', 'createdBy', 'updatedBy', 'id', 'name', 'createdAt', 'updatedAt', 'uuid', '' . "\0" . 'App\\Entities\\User' . "\0" . 'events'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getLastLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastLogin', []);

        return parent::getLastLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function updateLastLogin(\Carbon\Carbon $carbon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateLastLogin', [$carbon]);

        return parent::updateLastLogin($carbon);
    }

    /**
     * {@inheritDoc}
     */
    public function getGrantableRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGrantableRoles', []);

        return parent::getGrantableRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getGrantablePermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGrantablePermissions', []);

        return parent::getGrantablePermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function getAddresses()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddresses', []);

        return parent::getAddresses();
    }

    /**
     * {@inheritDoc}
     */
    public function addAddress(\App\Entities\Address $address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAddress', [$address]);

        return parent::addAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAddress(\App\Entities\Address $address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAddress', [$address]);

        return parent::hasAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAddressByType(\App\Entities\Address $address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAddressByType', [$address]);

        return parent::hasAddressByType($address);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAddress(\App\Entities\Address $address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAddress', [$address]);

        return parent::removeAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function isRoot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRoot', []);

        return parent::isRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function addRole(\App\Entities\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$role]);

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole(\App\Entities\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', [$role]);

        return parent::hasRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function checkRole($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkRole', [$name]);

        return parent::checkRole($name);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole(\App\Entities\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', [$role]);

        return parent::removeRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermissions', []);

        return parent::getPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function addPermission(\App\Entities\Permission $permission)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPermission', [$permission]);

        return parent::addPermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function hasPermission(\App\Entities\Permission $permission)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasPermission', [$permission]);

        return parent::hasPermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function removePermission(\App\Entities\Permission $permission)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePermission', [$permission]);

        return parent::removePermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganizations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganizations', []);

        return parent::getOrganizations();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganisations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganisations', []);

        return parent::getOrganisations();
    }

    /**
     * {@inheritDoc}
     */
    public function addOrganization(\App\Entities\Organization $organization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOrganization', [$organization]);

        return parent::addOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function hasOrganization(\App\Entities\Organization $organization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasOrganization', [$organization]);

        return parent::hasOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOrganization(\App\Entities\Organization $organization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOrganization', [$organization]);

        return parent::removeOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessToken', []);

        return parent::getAccessToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessToken($accessToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessToken', [$accessToken]);

        return parent::setAccessToken($accessToken);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccount', []);

        return parent::getAccount();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccount($account)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccount', [$account]);

        return parent::setAccount($account);
    }

    /**
     * {@inheritDoc}
     */
    public function getProfileImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProfileImage', []);

        return parent::getProfileImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setProfileImage($profileImage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProfileImage', [$profileImage]);

        return parent::setProfileImage($profileImage);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', []);

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifierName', []);

        return parent::getAuthIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifier', []);

        return parent::getAuthIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthPassword', []);

        return parent::getAuthPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberToken', []);

        return parent::getRememberToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setRememberToken($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRememberToken', [$value]);

        return parent::setRememberToken($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberTokenName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberTokenName', []);

        return parent::getRememberTokenName();
    }

    /**
     * {@inheritDoc}
     */
    public function can($ability, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'can', [$ability, $arguments]);

        return parent::can($ability, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function cant($ability, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cant', [$ability, $arguments]);

        return parent::cant($ability, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function cannot($ability, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cannot', [$ability, $arguments]);

        return parent::cannot($ability, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailForPasswordReset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailForPasswordReset', []);

        return parent::getEmailForPasswordReset();
    }

    /**
     * {@inheritDoc}
     */
    public function sendPasswordResetNotification($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'sendPasswordResetNotification', [$token]);

        return parent::sendPasswordResetNotification($token);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy($updatedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\Carbon\Carbon $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\Carbon\Carbon $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUuid', []);

        return parent::getUuid();
    }

    /**
     * {@inheritDoc}
     */
    public function setUuid($uuid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUuid', [$uuid]);

        return parent::setUuid($uuid);
    }

    /**
     * {@inheritDoc}
     */
    public function isActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function activate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'activate', []);

        return parent::activate();
    }

    /**
     * {@inheritDoc}
     */
    public function deactivate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'deactivate', []);

        return parent::deactivate();
    }

    /**
     * {@inheritDoc}
     */
    public function belongsToOrganisation($org, $requireAll = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'belongsToOrganisation', [$org, $requireAll]);

        return parent::belongsToOrganisation($org, $requireAll);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRoleByName($name, $requireAll = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRoleByName', [$name, $requireAll]);

        return parent::hasRoleByName($name, $requireAll);
    }

    /**
     * {@inheritDoc}
     */
    public function hasPermissionTo($name, $requireAll = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasPermissionTo', [$name, $requireAll]);

        return parent::hasPermissionTo($name, $requireAll);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toString', []);

        return parent::toString();
    }

    /**
     * {@inheritDoc}
     */
    public function notify($instance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notify', [$instance]);

        return parent::notify($instance);
    }

    /**
     * {@inheritDoc}
     */
    public function notifyNow($instance, array $channels = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notifyNow', [$instance, $channels]);

        return parent::notifyNow($instance, $channels);
    }

    /**
     * {@inheritDoc}
     */
    public function routeNotificationFor($driver)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'routeNotificationFor', [$driver]);

        return parent::routeNotificationFor($driver);
    }

    /**
     * {@inheritDoc}
     */
    public function raise(\Somnambulist\DomainEvents\Events\DomainEvent $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'raise', [$event]);

        return parent::raise($event);
    }

    /**
     * {@inheritDoc}
     */
    public function releaseAndResetEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'releaseAndResetEvents', []);

        return parent::releaseAndResetEvents();
    }

}
